use cutting_cli::engine::model::tile::{TileNode, TileDimensions};
use cutting_cli::engine::cutting::CuttingEngine;

fn main() {
    println!("üîß Cutting");
    println!("================================================");
    println!();

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≠—Ç–∞–ø–∞ 1: –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    println!("üìã –≠—Ç–∞–ø 1: –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö");
    println!("-----------------------------------");
    
    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    let mut sheet = TileNode::new(0, 1000, 0, 600);
    println!("–°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {}x{} –º–º", sheet.get_width(), sheet.get_height());
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∏—Ç–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    let tiles = vec![
        TileDimensions::new(1, 300, 200, "–§–∞–Ω–µ—Ä–∞".to_string(), 1, Some("–°—Ç–æ–ª–µ—à–Ω–∏—Ü–∞".to_string())),
        TileDimensions::new(2, 150, 100, "–§–∞–Ω–µ—Ä–∞".to_string(), 1, Some("–ü–æ–ª–∫–∞".to_string())),
        TileDimensions::new(3, 200, 250, "–§–∞–Ω–µ—Ä–∞".to_string(), 1, Some("–î–≤–µ—Ä—Ü–∞".to_string())),
        TileDimensions::new(4, 100, 80, "–§–∞–Ω–µ—Ä–∞".to_string(), 1, Some("–Ø—â–∏–∫".to_string())),
        TileDimensions::new(5, 50, 50, "–§–∞–Ω–µ—Ä–∞".to_string(), 1, Some("–ö–≤–∞–¥—Ä–∞—Ç".to_string())),
    ];
    
    println!("–ü–ª–∏—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:");
    for tile in &tiles {
        println!("  - ID {}: {}x{} –º–º ({})", 
            tile.id, tile.width, tile.height, 
            tile.label.as_ref().unwrap_or(&"–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è".to_string()));
    }
    println!();

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≠—Ç–∞–ø–∞ 2: –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è
    println!("‚öôÔ∏è  –≠—Ç–∞–ø 2: –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è");
    println!("-------------------------------");
    
    let mut placed_count = 0;
    
    for tile in &tiles {
        println!("–†–∞–∑–º–µ—â–∞–µ–º –ø–ª–∏—Ç–∫—É ID {}: {}x{} –º–º...", tile.id, tile.width, tile.height);
        
        match CuttingEngine::try_place_tile(&mut sheet, tile) {
            Ok(true) => {
                placed_count += 1;
                println!("  ‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞{}", if sheet.get_final_tile_nodes().last().map_or(false, |n| n.is_rotated) { " (–ø–æ–≤–µ—Ä–Ω—É—Ç–∞)" } else { "" });
            }
            Ok(false) => {
                println!("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å - –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è");
            }
            Err(e) => {
                println!("  ‚ùå –û—à–∏–±–∫–∞: {:?}", e);
            }
        }
    }
    
    println!();
    println!("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è");
    println!("------------------------");
    println!("–†–∞–∑–º–µ—â–µ–Ω–æ –ø–ª–∏—Ç–æ–∫: {}/{}", placed_count, tiles.len());
    println!("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å: {} –º–º¬≤", sheet.get_used_area());
    println!("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ª–∏—Å—Ç–∞: {} –º–º¬≤", sheet.get_area());
    println!("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {:.1}%", sheet.get_used_area_ratio() * 100.0);
    println!("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ–∑–æ–≤: {}", sheet.get_nbr_final_tiles());
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∏—Ç–∫–∏
    println!();
    println!("üéØ –†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –ø–ª–∏—Ç–∫–∏:");
    let final_tiles = sheet.get_final_tile_nodes();
    for (i, final_tile) in final_tiles.iter().enumerate() {
        let original_tile = tiles.iter().find(|t| t.id == final_tile.external_id);
        if let Some(tile) = original_tile {
            println!("  {}. {} - –ø–æ–∑–∏—Ü–∏—è ({}, {}) —Ä–∞–∑–º–µ—Ä {}x{}{}", 
                i + 1,
                tile.label.as_ref().unwrap_or(&format!("ID {}", tile.id)),
                final_tile.get_x1(), final_tile.get_y1(),
                final_tile.get_width(), final_tile.get_height(),
                if final_tile.is_rotated { " (–ø–æ–≤–µ—Ä–Ω—É—Ç–∞)" } else { "" }
            );
        }
    }
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    println!();
    println!("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤");
    println!("--------------------------");
    
    // –¢–µ—Å—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞
    let test_node = TileNode::new(0, 200, 0, 100);
    match CuttingEngine::split_horizontally(&test_node, 60) {
        Ok(result) => {
            println!("‚úÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–µ–∑: {}x{} ‚Üí {}x{} + {}x{}", 
                test_node.get_width(), test_node.get_height(),
                result.left_node.get_width(), result.left_node.get_height(),
                result.right_node.get_width(), result.right_node.get_height());
        }
        Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞: {:?}", e),
    }
    
    // –¢–µ—Å—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞
    match CuttingEngine::split_vertically(&test_node, 120) {
        Ok(result) => {
            println!("‚úÖ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–µ–∑: {}x{} ‚Üí {}x{} + {}x{}", 
                test_node.get_width(), test_node.get_height(),
                result.left_node.get_width(), result.left_node.get_height(),
                result.right_node.get_width(), result.right_node.get_height());
        }
        Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞: {:?}", e),
    }
    
    println!();
    println!("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    println!("–≠—Ç–∞–ø—ã 1 –∏ 2 —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã.");
}
