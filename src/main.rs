use clap::{Parser, Subcommand};
use cutting_cli::engine::service::CutListOptimizerService;
use cutting_cli::engine::logger::CutListLoggerImpl;
use cutting_cli::engine::model::{
    CalculationRequest, ClientInfo, Configuration, Panel, PerformanceThresholds
};
use cutting_cli::error::CuttingError;
use serde_json;
use std::sync::Arc;
use std::time::Duration;
use std::thread;
use std::fs;
use std::path::Path;

/// CLI –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–∫—Ä–æ—è
#[derive(Parser)]
#[command(name = "cutting-cli")]
#[command(about = "–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–∫—Ä–æ—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")]
#[command(version = "1.0.0")]
struct Cli {
    #[command(subcommand)]
    command: Commands,
}

#[derive(Subcommand)]
enum Commands {
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ä–∞—Å–∫—Ä–æ—è
    Optimize {
        /// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (JSON)
        #[arg(short, long)]
        input: String,
        
        /// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (JSON)
        #[arg(short, long)]
        output: Option<String>,
        
        /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        #[arg(short, long, default_value = "4")]
        threads: usize,
        
        /// –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        #[arg(short = 'T', long, default_value = "300")]
        timeout: u64,
        
        /// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        #[arg(short, long)]
        verbose: bool,
    },
    
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    Submit {
        /// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (JSON)
        #[arg(short, long)]
        input: String,
        
        /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        #[arg(short, long, default_value = "4")]
        threads: usize,
        
        /// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        #[arg(short, long)]
        verbose: bool,
    },
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    Status {
        /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
        #[arg(short, long)]
        task_id: String,
        
        /// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        #[arg(short, long)]
        verbose: bool,
    },
    
    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
    Stop {
        /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
        #[arg(short, long)]
        task_id: String,
    },
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
    Terminate {
        /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
        #[arg(short, long)]
        task_id: String,
    },
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∫–ª–∏–µ–Ω—Ç–∞
    List {
        /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
        #[arg(short, long)]
        client_id: String,
        
        /// –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        #[arg(short, long)]
        status: Option<String>,
    },
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    Stats,
    
    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    Demo,
    
    /// –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    Example {
        /// –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞
        #[arg(short, long, default_value = "example_input.json")]
        output: String,
    },
}

fn main() {
    let cli = Cli::parse();
    
    match cli.command {
        Commands::Optimize { input, output, threads, timeout, verbose } => {
            if let Err(e) = run_optimization(input, output, threads, timeout, verbose) {
                eprintln!("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {}", e);
                std::process::exit(1);
            }
        }
        Commands::Submit { input, threads, verbose } => {
            if let Err(e) = submit_task(input, threads, verbose) {
                eprintln!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏: {}", e);
                std::process::exit(1);
            }
        }
        Commands::Status { task_id, verbose } => {
            if let Err(e) = check_status(task_id, verbose) {
                eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {}", e);
                std::process::exit(1);
            }
        }
        Commands::Stop { task_id } => {
            if let Err(e) = stop_task(task_id) {
                eprintln!("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏: {}", e);
                std::process::exit(1);
            }
        }
        Commands::Terminate { task_id } => {
            if let Err(e) = terminate_task(task_id) {
                eprintln!("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {}", e);
                std::process::exit(1);
            }
        }
        Commands::List { client_id, status } => {
            if let Err(e) = list_tasks(client_id, status) {
                eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {}", e);
                std::process::exit(1);
            }
        }
        Commands::Stats => {
            if let Err(e) = show_stats() {
                eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e);
                std::process::exit(1);
            }
        }
        Commands::Demo => {
            run_demo();
        }
        Commands::Example { output } => {
            if let Err(e) = create_example(output) {
                eprintln!("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: {}", e);
                std::process::exit(1);
            }
        }
    }
}

fn run_optimization(
    input_path: String,
    output_path: Option<String>,
    threads: usize,
    timeout: u64,
    verbose: bool,
) -> Result<(), CuttingError> {
    println!("üîß –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–∫—Ä–æ—è");
    println!("================================");
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    let request = load_request_from_file(&input_path)?;
    
    if verbose {
        println!("üìã –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:");
        println!("  - –ü–∞–Ω–µ–ª–µ–π: {}", request.panels.len());
        println!("  - –°—Ç–æ–∫–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π: {}", request.stock_panels.len());
        println!("  - –ö–ª–∏–µ–Ω—Ç: {}", request.client_info.id);
        println!("  - –ü–æ—Ç–æ–∫–æ–≤: {}", threads);
        println!();
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
    let logger = Arc::new(CutListLoggerImpl::new());
    let mut optimizer = cutting_cli::engine::service::CutListOptimizerServiceImpl::new(logger.clone());
    
    optimizer.init(threads)?;
    
    println!("‚öôÔ∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...");
    
    // –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    let start_time = std::time::Instant::now();
    let result = run_with_timeout(
        move || optimizer.optimize(request),
        Duration::from_secs(timeout),
    )?;
    
    let elapsed = start_time.elapsed();
    
    println!("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {:.2} —Å–µ–∫", elapsed.as_secs_f64());
    
    if verbose {
        println!("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
        println!("  - –†–∞–∑–º–µ—â–µ–Ω–æ –ø–∞–Ω–µ–ª–µ–π: {}", result.panels.len());
        println!("  - –ù–µ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å: {}", result.no_fit_panels.len());
        println!("  - –ë–µ–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {}", result.no_material_panels.len());
        println!();
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if let Some(output_path) = output_path {
        save_result_to_file(&result, &output_path)?;
        println!("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {}", output_path);
    } else {
        // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        let json = serde_json::to_string_pretty(&result)
            .map_err(|e| CuttingError::GeneralCuttingError(format!("JSON serialization error: {}", e)))?;
        println!("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:");
        println!("{}", json);
    }
    
    Ok(())
}

fn submit_task(input_path: String, threads: usize, verbose: bool) -> Result<(), CuttingError> {
    println!("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ");
    println!("================================");
    
    let request = load_request_from_file(&input_path)?;
    
    if verbose {
        println!("üìã –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:");
        println!("  - –ü–∞–Ω–µ–ª–µ–π: {}", request.panels.len());
        println!("  - –°—Ç–æ–∫–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π: {}", request.stock_panels.len());
        println!("  - –ö–ª–∏–µ–Ω—Ç: {}", request.client_info.id);
        println!();
    }
    
    let logger = Arc::new(CutListLoggerImpl::new());
    let mut service = cutting_cli::engine::service::CutListOptimizerServiceImpl::new(logger);
    service.init(threads)?;
    
    let result = service.submit_task(request)?;
    
    if result.is_success() {
        println!("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
        if let Some(task_id) = result.task_id {
            println!("üÜî ID –∑–∞–¥–∞—á–∏: {}", task_id);
            println!("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'cutting-cli status --task-id {}' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", task_id);
        }
    } else {
        println!("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏");
        println!("   –ö–æ–¥ –æ—à–∏–±–∫–∏: {}", result.status_code);
    }
    
    Ok(())
}

fn check_status(task_id: String, verbose: bool) -> Result<(), CuttingError> {
    println!("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {}", task_id);
    println!("=====================================");
    
    let logger = Arc::new(CutListLoggerImpl::new());
    let mut service = cutting_cli::engine::service::CutListOptimizerServiceImpl::new(logger);
    service.init(1)?;
    
    let status_option = service.get_task_status(&task_id)?;
    
    if let Some(status) = status_option {
        println!("üìã –°—Ç–∞—Ç—É—Å: {}", status.status);
        println!("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}%", status.init_percentage);
        println!("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {}%", status.percentage_done);
        
        if verbose {
            if let Some(details) = status.details {
                println!("üìù –î–µ—Ç–∞–ª–∏: {}", details);
            }
            
            if let Some(solution) = status.solution {
                println!("üìä –†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:");
                println!("  - –†–∞–∑–º–µ—â–µ–Ω–æ –ø–∞–Ω–µ–ª–µ–π: {}", solution.panels.len());
                println!("  - –ù–µ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å: {}", solution.no_fit_panels.len());
                println!("  - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {:.1}%", solution.statistics.efficiency_percentage);
            }
        }
    } else {
        println!("‚ùå –ó–∞–¥–∞—á–∞ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", task_id);
    }
    
    Ok(())
}

fn stop_task(task_id: String) -> Result<(), CuttingError> {
    println!("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏: {}", task_id);
    
    let logger = Arc::new(CutListLoggerImpl::new());
    let mut service = cutting_cli::engine::service::CutListOptimizerServiceImpl::new(logger);
    service.init(1)?;
    
    service.stop_task(&task_id)?;
    
    println!("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    Ok(())
}

fn terminate_task(task_id: String) -> Result<(), CuttingError> {
    println!("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {}", task_id);
    
    let logger = Arc::new(CutListLoggerImpl::new());
    let mut service = cutting_cli::engine::service::CutListOptimizerServiceImpl::new(logger);
    service.init(1)?;
    
    service.terminate_task(&task_id)?;
    
    println!("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ");
    Ok(())
}

fn list_tasks(client_id: String, _status_filter: Option<String>) -> Result<(), CuttingError> {
    println!("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∫–ª–∏–µ–Ω—Ç–∞: {}", client_id);
    println!("===============================");
    
    let logger = Arc::new(CutListLoggerImpl::new());
    let mut service = cutting_cli::engine::service::CutListOptimizerServiceImpl::new(logger);
    service.init(1)?;
    
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    let status = None; // status_filter.and_then(|s| parse_task_status(&s));
    
    let tasks = service.get_tasks(&client_id, status)?;
    
    if tasks.is_empty() {
        println!("üì≠ –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    } else {
        println!("üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {}", tasks.len());
        println!();
        
        for (i, task) in tasks.iter().enumerate() {
            println!("{}. ID: {}", i + 1, task.id);
            println!("   –°—Ç–∞—Ç—É—Å: {:?}", task.status);
            if let Some(start_time) = task.start_time {
                println!("   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {}", start_time.format("%Y-%m-%d %H:%M:%S"));
            }
            if let Some(end_time) = task.end_time {
                println!("   –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {}", end_time.format("%Y-%m-%d %H:%M:%S"));
            }
            println!();
        }
    }
    
    Ok(())
}

fn show_stats() -> Result<(), CuttingError> {
    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã");
    println!("====================");
    
    let logger = Arc::new(CutListLoggerImpl::new());
    let mut service = cutting_cli::engine::service::CutListOptimizerServiceImpl::new(logger);
    service.init(1)?;
    
    let stats = service.get_stats()?;
    
    println!("üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {}", stats.nbr_running_tasks);
    println!("‚è∏Ô∏è  –ó–∞–¥–∞—á–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: {}", stats.nbr_idle_tasks);
    println!("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {}", stats.nbr_finished_tasks);
    println!("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {}", stats.nbr_stopped_tasks);
    println!("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {}", stats.nbr_terminated_tasks);
    println!("‚ùå –ó–∞–¥–∞—á–∏ —Å –æ—à–∏–±–∫–∞–º–∏: {}", stats.nbr_error_tasks);
    println!();
    println!("üßµ –í—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è –ø–æ—Ç–æ–∫–∏: {}", stats.nbr_running_threads);
    println!("üìã –ü–æ—Ç–æ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏: {}", stats.nbr_queued_threads);
    println!("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: {}", stats.nbr_finished_threads);
    
    Ok(())
}

fn run_demo() {
    use cutting_cli::engine::model::tile::{TileNode, TileDimensions};
    use cutting_cli::engine::cutting::CuttingEngine;

    println!("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤");
    println!("==================================");
    println!();

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≠—Ç–∞–ø–∞ 1: –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    println!("üìã –≠—Ç–∞–ø 1: –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö");
    println!("-----------------------------------");
    
    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    let mut sheet = TileNode::new(0, 1000, 0, 600);
    println!("–°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {}x{} –º–º", sheet.get_width(), sheet.get_height());
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∏—Ç–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    let tiles = vec![
        TileDimensions::new(1, 300, 200, "–§–∞–Ω–µ—Ä–∞".to_string(), 0, Some("–°—Ç–æ–ª–µ—à–Ω–∏—Ü–∞".to_string())),
        TileDimensions::new(2, 150, 100, "–§–∞–Ω–µ—Ä–∞".to_string(), 0, Some("–ü–æ–ª–∫–∞".to_string())),
        TileDimensions::new(3, 200, 250, "–§–∞–Ω–µ—Ä–∞".to_string(), 0, Some("–î–≤–µ—Ä—Ü–∞".to_string())),
        TileDimensions::new(4, 100, 80, "–§–∞–Ω–µ—Ä–∞".to_string(), 0, Some("–Ø—â–∏–∫".to_string())),
        TileDimensions::new(5, 50, 50, "–§–∞–Ω–µ—Ä–∞".to_string(), 0, Some("–ö–≤–∞–¥—Ä–∞—Ç".to_string())),
    ];
    
    println!("–ü–ª–∏—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:");
    for (i, tile) in tiles.iter().enumerate() {
        println!("  - ID {}: {}x{} –º–º ({})", 
            i + 1, tile.width, tile.height, 
            tile.label.as_ref().unwrap_or(&"–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è".to_string()));
    }
    println!();

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≠—Ç–∞–ø–∞ 2: –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è
    println!("‚öôÔ∏è  –≠—Ç–∞–ø 2: –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è");
    println!("-------------------------------");
    
    let mut placed_count = 0;
    
    for (i, tile) in tiles.iter().enumerate() {
        println!("–†–∞–∑–º–µ—â–∞–µ–º –ø–ª–∏—Ç–∫—É ID {}: {}x{} –º–º...", i + 1, tile.width, tile.height);
        
        // –°–æ–∑–¥–∞–µ–º TileDimensions —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
        let tile_with_id = TileDimensions::new(
            i as i32 + 1,
            tile.width,
            tile.height,
            tile.material.clone(),
            tile.orientation,
            tile.label.clone(),
        );
        
        match CuttingEngine::try_place_tile(&mut sheet, &tile_with_id) {
            Ok(true) => {
                placed_count += 1;
                println!("  ‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞{}", if sheet.get_final_tile_nodes().last().map_or(false, |n| n.is_rotated) { " (–ø–æ–≤–µ—Ä–Ω—É—Ç–∞)" } else { "" });
            }
            Ok(false) => {
                println!("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å - –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è");
            }
            Err(e) => {
                println!("  ‚ùå –û—à–∏–±–∫–∞: {:?}", e);
            }
        }
    }
    
    println!();
    println!("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è");
    println!("------------------------");
    println!("–†–∞–∑–º–µ—â–µ–Ω–æ –ø–ª–∏—Ç–æ–∫: {}/{}", placed_count, tiles.len());
    println!("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å: {} –º–º¬≤", sheet.get_used_area());
    println!("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –ª–∏—Å—Ç–∞: {} –º–º¬≤", sheet.get_area());
    println!("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {:.1}%", sheet.get_used_area_ratio() * 100.0);
    println!("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ–∑–æ–≤: {}", sheet.get_nbr_final_tiles());
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∏—Ç–∫–∏
    println!();
    println!("üéØ –†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –ø–ª–∏—Ç–∫–∏:");
    let final_tiles = sheet.get_final_tile_nodes();
    for (i, final_tile) in final_tiles.iter().enumerate() {
        let original_tile = tiles.iter().find(|t| t.id == final_tile.external_id);
        if let Some(tile) = original_tile {
            println!("  {}. {} - –ø–æ–∑–∏—Ü–∏—è ({}, {}) —Ä–∞–∑–º–µ—Ä {}x{}{}", 
                i + 1,
                tile.label.as_ref().unwrap_or(&format!("ID {}", tile.id)),
                final_tile.get_x1(), final_tile.get_y1(),
                final_tile.get_width(), final_tile.get_height(),
                if final_tile.is_rotated { " (–ø–æ–≤–µ—Ä–Ω—É—Ç–∞)" } else { "" }
            );
        }
    }
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    println!();
    println!("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤");
    println!("--------------------------");
    
    // –¢–µ—Å—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞
    let test_node = TileNode::new(0, 200, 0, 100);
    match CuttingEngine::split_horizontally(&test_node, 60) {
        Ok(result) => {
            println!("‚úÖ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–µ–∑: {}x{} ‚Üí {}x{} + {}x{}", 
                test_node.get_width(), test_node.get_height(),
                result.left_node.get_width(), result.left_node.get_height(),
                result.right_node.get_width(), result.right_node.get_height());
        }
        Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞: {:?}", e),
    }
    
    // –¢–µ—Å—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞
    match CuttingEngine::split_vertically(&test_node, 120) {
        Ok(result) => {
            println!("‚úÖ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–µ–∑: {}x{} ‚Üí {}x{} + {}x{}", 
                test_node.get_width(), test_node.get_height(),
                result.left_node.get_width(), result.left_node.get_height(),
                result.right_node.get_width(), result.right_node.get_height());
        }
        Err(e) => println!("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞: {:?}", e),
    }
    
    println!();
    println!("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    println!("–≠—Ç–∞–ø—ã 1 –∏ 2 —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã.");
}

fn create_example(output_path: String) -> Result<(), CuttingError> {
    println!("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞");
    println!("==================================");
    
    let example_request = CalculationRequest {
        client_info: ClientInfo::with_details(
            "example_client".to_string(),
            Some("Example Client".to_string()),
            Some("1.0.0".to_string()),
            Some("CLI".to_string()),
        ),
        configuration: Configuration {
            cut_thickness: "3.0".to_string(),
            min_trim_dimension: "10.0".to_string(),
            optimization_factor: 1.0,
            use_single_stock_unit: false,
            cut_orientation_preference: 0,
            performance_thresholds: Some(PerformanceThresholds::default()),
        },
        panels: vec![
            Panel::new(1, "300.0".to_string(), "200.0".to_string(), 2, Some("–§–∞–Ω–µ—Ä–∞".to_string())),
            Panel::new(2, "150.0".to_string(), "100.0".to_string(), 4, Some("–§–∞–Ω–µ—Ä–∞".to_string())),
            Panel::new(3, "200.0".to_string(), "250.0".to_string(), 1, Some("–§–∞–Ω–µ—Ä–∞".to_string())),
            Panel::new(4, "100.0".to_string(), "80.0".to_string(), 3, Some("–§–∞–Ω–µ—Ä–∞".to_string())),
        ],
        stock_panels: vec![
            Panel::new(101, "1000.0".to_string(), "600.0".to_string(), 5, Some("–§–∞–Ω–µ—Ä–∞".to_string())),
            Panel::new(102, "800.0".to_string(), "400.0".to_string(), 3, Some("–§–∞–Ω–µ—Ä–∞".to_string())),
        ],
    };
    
    let json = serde_json::to_string_pretty(&example_request)
        .map_err(|e| CuttingError::GeneralCuttingError(format!("JSON serialization error: {}", e)))?;
    
    fs::write(&output_path, json)
        .map_err(|e| CuttingError::GeneralCuttingError(format!("File write error: {}", e)))?;
    
    println!("‚úÖ –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω: {}", output_path);
    println!("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'cutting-cli optimize --input {}' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", output_path);
    
    Ok(())
}

fn load_request_from_file(path: &str) -> Result<CalculationRequest, CuttingError> {
    if !Path::new(path).exists() {
        return Err(CuttingError::GeneralCuttingError(format!("File not found: {}", path)));
    }
    
    let content = fs::read_to_string(path)
        .map_err(|e| CuttingError::GeneralCuttingError(format!("File read error: {}", e)))?;
    
    let request: CalculationRequest = serde_json::from_str(&content)
        .map_err(|e| CuttingError::GeneralCuttingError(format!("JSON parse error: {}", e)))?;
    
    Ok(request)
}

fn save_result_to_file(result: &cutting_cli::engine::model::CalculationResponse, path: &str) -> Result<(), CuttingError> {
    let json = serde_json::to_string_pretty(result)
        .map_err(|e| CuttingError::GeneralCuttingError(format!("JSON serialization error: {}", e)))?;
    
    fs::write(path, json)
        .map_err(|e| CuttingError::GeneralCuttingError(format!("File write error: {}", e)))?;
    
    Ok(())
}

fn run_with_timeout<F, T>(f: F, timeout: Duration) -> Result<T, CuttingError>
where
    F: FnOnce() -> Result<T, CuttingError> + Send + 'static,
    T: Send + 'static,
{
    use std::sync::mpsc;
    
    let (tx, rx) = mpsc::channel();
    
    thread::spawn(move || {
        let result = f();
        let _ = tx.send(result);
    });
    
    match rx.recv_timeout(timeout) {
        Ok(result) => result,
        Err(_) => Err(CuttingError::Timeout(format!("Operation timed out after {} seconds", timeout.as_secs()))),
    }
}
