use super::grouping::GroupedTileDimensions;
use super::{CutListOptimizerServiceImpl, MAX_PERMUTATION_ITERATIONS, MAX_STOCK_ITERATIONS};
use crate::engine::model::mosaic::Mosaic;
use crate::engine::model::request::CalculationRequest;
use crate::engine::model::solution::Solution;
use crate::engine::model::tile::TileDimensions;
use crate::engine::stock::StockSolution;
use crate::error::CuttingError;
use crate::validate_calculation_request;
use std::collections::HashMap;
/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
#[derive(Debug, Clone)]
struct OriginalPanelInfo {
    original_width: f64,
    original_height: f64,
    scaled_width: i32,
    scaled_height: i32,
    count: i32,
    index: i32,
}
/// –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
#[derive(Debug, Clone)]
pub struct OptimizationResult {
    pub solutions: Vec<Solution>,
    pub placed_panels_count: usize,
    pub total_area: f64,
    pub used_area: f64,
    pub efficiency: f64,
    pub cuts_count: usize,
}

impl OptimizationResult {
    pub fn new() -> Self {
        Self {
            solutions: Vec::new(),
            placed_panels_count: 0,
            total_area: 0.0,
            used_area: 0.0,
            efficiency: 0.0,
            cuts_count: 0,
        }
    }
}

impl CutListOptimizerServiceImpl {
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    pub fn perform_optimization(
        &self,
        request: &CalculationRequest,
    ) -> Result<OptimizationResult, CuttingError> {
        println!("üîß perform_optimization: –ù–∞—á–∏–Ω–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é");
        self.cut_list_logger
            .info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π");

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        let validation_summary = validate_calculation_request(request)
            .map_err(|e| CuttingError::GeneralCuttingError(format!("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {}", e)))?;
        
        println!("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ: {}", validation_summary);

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ TileDimensions —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω—ã—Ö ID
        let mut tile_dimensions_list = Vec::new();
        let mut original_panel_mapping = std::collections::HashMap::new(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å

        for panel in &request.panels {
            if panel.is_valid() {
                if let (Ok(width_f64), Ok(height_f64)) =
                    (panel.width.parse::<f64>(), panel.height.parse::<f64>())
                {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ Java
                    let scaled_width = (width_f64 * validation_summary.scale_factor).round() as i32;
                    let scaled_height = (height_f64 * validation_summary.scale_factor).round() as i32;
                    
                    println!(
                        "üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å ID {}: {}x{} -> {}x{} (–º–∞—Å—à—Ç–∞–±: {:.2}) count={}",
                        panel.id, width_f64, height_f64, scaled_width, scaled_height, 
                        validation_summary.scale_factor, panel.count
                    );

                    for i in 0..panel.count {
                        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π ID –ø–∞–Ω–µ–ª–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                        let tile_dimensions = TileDimensions::new(
                            panel.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π ID –ø–∞–Ω–µ–ª–∏
                            scaled_width,
                            scaled_height,
                            panel.material.clone(),
                            panel.orientation,
                            panel.label.clone(),
                        );
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö
                        original_panel_mapping.insert(
                            panel.id,
                            OriginalPanelInfo {
                                original_width: width_f64,
                                original_height: height_f64,
                                scaled_width,
                                scaled_height,
                                count: panel.count,
                                index: i,
                            }
                        );
                        
                        println!("  ‚ûï –°–æ–∑–¥–∞–Ω–∞ –ø–ª–∏—Ç–∫–∞ ID {}: {}x{}", panel.id, scaled_width, scaled_height);
                        tile_dimensions_list.push(tile_dimensions);
                    }
                } else {
                    println!(
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –ø–∞–Ω–µ–ª–∏ ID {}: width='{}', height='{}'",
                        panel.id, panel.width, panel.height
                    );
                }
            }
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∫–ª–∞–¥—Å–∫–∏–µ –ø–∞–Ω–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—á–µ—Ç–æ–º count
        let mut stock_tile_dimensions = Vec::new();
        let mut original_stock_mapping = std::collections::HashMap::new();

        for stock_panel in &request.stock_panels {
            if stock_panel.is_valid() {
                if let (Ok(width_f64), Ok(height_f64)) = (
                    stock_panel.width.parse::<f64>(),
                    stock_panel.height.parse::<f64>(),
                ) {
                    let scaled_width = (width_f64 * validation_summary.scale_factor).round() as i32;
                    let scaled_height = (height_f64 * validation_summary.scale_factor).round() as i32;
                    
                    println!(
                        "üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å ID {}: {}x{} -> {}x{} count={}",
                        stock_panel.id, width_f64, height_f64, scaled_width, scaled_height, stock_panel.count
                    );

                    for i in 0..stock_panel.count {
                        let tile_dimensions = TileDimensions::new(
                            stock_panel.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π ID —Å—Ç–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
                            scaled_width,
                            scaled_height,
                            stock_panel.material.clone(),
                            stock_panel.orientation,
                            stock_panel.label.clone(),
                        );
                        
                        original_stock_mapping.insert(
                            stock_panel.id,
                            OriginalPanelInfo {
                                original_width: width_f64,
                                original_height: height_f64,
                                scaled_width,
                                scaled_height,
                                count: stock_panel.count,
                                index: i,
                            }
                        );
                        
                        println!(
                            "  ‚ûï –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–æ–∫–æ–≤–∞—è –ø–ª–∏—Ç–∫–∞ ID {}: {}x{}",
                            stock_panel.id, scaled_width, scaled_height
                        );
                        stock_tile_dimensions.push(tile_dimensions);
                    }
                }
            }
        }

        println!(
            "üìä –ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {} –ø–∞–Ω–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, {} —Å—Ç–æ–∫–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π",
            tile_dimensions_list.len(),
            stock_tile_dimensions.len()
        );

        if tile_dimensions_list.is_empty() {
            println!("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è");
            return Ok(OptimizationResult::new());
        }

        if stock_tile_dimensions.is_empty() {
            println!("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∫–ª–∞–¥—Å–∫–∏—Ö –ø–∞–Ω–µ–ª–µ–π");
            return Ok(OptimizationResult::new());
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–ª–æ—â–∞–¥–∏
        tile_dimensions_list.sort_by(|a, b| {
            let area_a = a.get_area();
            let area_b = b.get_area();
            area_b.cmp(&area_a)
        });

        println!("üîÑ –ó–∞–ø—É—Å–∫ compute_optimal_solution_improved...");
        let mut optimization_result =
            self.compute_optimal_solution_improved(&tile_dimensions_list, &stock_tile_dimensions)?;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        self.validate_and_fix_results(&mut optimization_result, &original_panel_mapping, &original_stock_mapping, validation_summary.scale_factor)?;

        println!(
            "‚úÖ compute_optimal_solution_improved –∑–∞–≤–µ—Ä—à–µ–Ω: —Ä–∞–∑–º–µ—â–µ–Ω–æ {} –ø–∞–Ω–µ–ª–µ–π",
            optimization_result.placed_panels_count
        );

        self.cut_list_logger.info(&format!(
            "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Ä–∞–∑–º–µ—â–µ–Ω–æ {}/{} –ø–∞–Ω–µ–ª–µ–π, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {:.2}%, —Ä–∞–∑—Ä–µ–∑–æ–≤: {}",
            optimization_result.placed_panels_count,
            tile_dimensions_list.len(),
            optimization_result.efficiency,
            optimization_result.cuts_count
        ));

        Ok(optimization_result)
    }

    /// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 7: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    fn validate_and_fix_results(
        &self,
        optimization_result: &mut OptimizationResult,
        original_panel_mapping: &std::collections::HashMap<i32, OriginalPanelInfo>,
        original_stock_mapping: &std::collections::HashMap<i32, OriginalPanelInfo>,
        scale_factor: f64,
    ) -> Result<(), CuttingError> {
        println!("üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...");

        for solution in &mut optimization_result.solutions {
            for mosaic in solution.get_mosaics() {
                let final_nodes = mosaic.get_final_tile_nodes();
                
                for node in final_nodes {
                    if let Some(original_info) = original_panel_mapping.get(&node.external_id) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º
                        let expected_width = original_info.scaled_width;
                        let expected_height = original_info.scaled_height;
                        
                        let actual_width = if node.is_rotated { node.get_height() } else { node.get_width() };
                        let actual_height = if node.is_rotated { node.get_width() } else { node.get_height() };
                        
                        if actual_width != expected_width || actual_height != expected_height {
                            println!(
                                "‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –ø–∞–Ω–µ–ª–∏ ID {}: –æ–∂–∏–¥–∞–ª–æ—Å—å {}x{}, –ø–æ–ª—É—á–µ–Ω–æ {}x{} (–ø–æ–≤–µ—Ä–Ω—É—Ç–æ: {})",
                                node.external_id, expected_width, expected_height, 
                                actual_width, actual_height, node.is_rotated
                            );
                        } else {
                            println!(
                                "‚úÖ –ü–∞–Ω–µ–ª—å ID {} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞: {}x{} (–ø–æ–≤–µ—Ä–Ω—É—Ç–æ: {})",
                                node.external_id, actual_width, actual_height, node.is_rotated
                            );
                        }
                    }
                }
            }
        }

        Ok(())
    }
    /// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è Java –ª–æ–≥–∏–∫–∏)
    pub fn compute_optimal_solution_improved(
        &self,
        tiles: &[TileDimensions],
        stock_tiles: &[TileDimensions],
    ) -> Result<OptimizationResult, CuttingError> {
        println!("üîß –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if tiles.is_empty() {
            println!("‚ùå –ù–µ—Ç –ø–∞–Ω–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è");
            return Ok(OptimizationResult::new());
        }
        
        if stock_tiles.is_empty() {
            println!("‚ùå –ù–µ—Ç —Å–∫–ª–∞–¥—Å–∫–∏—Ö –ø–∞–Ω–µ–ª–µ–π");
            return Ok(OptimizationResult::new());
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª–∏ –∫–∞–∫ –≤ Java
        let grouped_tiles = self.generate_groups(tiles);
        let distinct_groups = self.get_distinct_grouped_tile_dimensions(&grouped_tiles);
        
        println!("üìä –°–æ–∑–¥–∞–Ω–æ {} –≥—Ä—É–ø–ø –∏–∑ {} –ø–∞–Ω–µ–ª–µ–π", distinct_groups.len(), tiles.len());
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–ø
        let group_keys: Vec<_> = distinct_groups.keys().cloned().collect();
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        if group_keys.is_empty() {
            println!("‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
            return Ok(OptimizationResult::new());
        }
        
        let permutations = if group_keys.len() <= 7 {
            self.permutation_generator.generate_all_permutations_groups(&group_keys)
        } else {
            let mut limited_keys = group_keys[..7].to_vec();
            let remaining_keys = group_keys[7..].to_vec();
            
            let base_permutations = self.permutation_generator.generate_all_permutations_groups(&limited_keys);
            base_permutations.into_iter().map(|mut perm| {
                perm.extend(remaining_keys.clone());
                perm
            }).collect()
        };
        
        println!("üîÄ –°–æ–∑–¥–∞–Ω–æ {} –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –≥—Ä—É–ø–ø", permutations.len());
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫
        if permutations.is_empty() {
            println!("‚ö†Ô∏è –ù–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
            return Ok(OptimizationResult::new());
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º
        let original_permutations_count = permutations.len();
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–ø –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–Ω–µ–ª–µ–π
        let tile_permutations: Vec<Vec<TileDimensions>> = permutations.into_iter()
            .map(|group_perm| self.groups_to_tiles(&group_perm, &grouped_tiles, &distinct_groups))
            .collect();
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫
        let unique_permutations = self.remove_duplicate_permutations(tile_permutations);
        println!("‚úÖ –û—Å—Ç–∞–ª–æ—Å—å {} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏–∑ {} –∏—Å—Ö–æ–¥–Ω—ã—Ö", 
            unique_permutations.len(), original_permutations_count);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫
        if unique_permutations.is_empty() {
            println!("‚ö†Ô∏è –ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
            return Ok(OptimizationResult::new());
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–æ–∫–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
        let stock_solutions = self.generate_stock_solutions_improved(stock_tiles, tiles);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–∫–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        if stock_solutions.is_empty() {
            println!("‚ö†Ô∏è –ù–µ—Ç —Å—Ç–æ–∫–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
            return Ok(OptimizationResult::new());
        }
        
        let mut best_solutions = Vec::new();
        let mut best_placed_count = 0;
        let mut best_efficiency = 0.0;
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–∫–∞–∫ –≤ Java)
        for (stock_idx, stock_solution) in stock_solutions.iter().enumerate().take(MAX_STOCK_ITERATIONS) {
            println!("üìã –°—Ç–æ–∫–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ {}/{}", stock_idx + 1, stock_solutions.len());
            
            for (perm_idx, permutation) in unique_permutations.iter().enumerate().take(MAX_PERMUTATION_ITERATIONS) {
                if perm_idx % 10 == 0 {
                    println!(
                        "üîÑ –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ {}/{}",
                        perm_idx + 1,
                        unique_permutations.len().min(MAX_PERMUTATION_ITERATIONS)
                    );
                }
                
                match self.compute_solutions_for_permutation_improved(permutation, stock_solution) {
                    Ok(solutions) => {
                        if let Some(best_solution) = solutions.first() {
                            let placed_count = best_solution.get_nbr_final_tiles() as usize;
                            let efficiency = best_solution.get_efficiency();
                            
                            if placed_count > best_placed_count || 
                               (placed_count == best_placed_count && efficiency > best_efficiency) {
                                println!("üéâ –ù–æ–≤–æ–µ –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ: {}/{} –ø–∞–Ω–µ–ª–µ–π, {:.2}% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
                                    placed_count, tiles.len(), efficiency);
                                
                                best_solutions = solutions;
                                best_placed_count = placed_count;
                                best_efficiency = efficiency;
                            }
                        }
                    }
                    Err(e) => {
                        self.cut_list_logger.warning(&format!("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏: {}", e));
                    }
                }

                // –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –æ—Ç–ª–∏—á–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                if best_placed_count == tiles.len() && best_efficiency > 95.0 {
                    println!("üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é");
                    break;
                }
            }

            if best_placed_count == tiles.len() && best_efficiency > 85.0 {
                break;
            }
        }

        Ok(OptimizationResult {
            solutions: best_solutions.clone(),
            placed_panels_count: best_placed_count,
            total_area: best_solutions.first().map(|s| s.get_total_area() as f64).unwrap_or(0.0),
            used_area: best_solutions.first().map(|s| s.get_used_area() as f64).unwrap_or(0.0),
            efficiency: best_efficiency,
            cuts_count: best_solutions.first().map(|s| s.get_cuts_count() as usize).unwrap_or(0),
        })
    }

    /// –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ (—Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è Java CutListThread.computeSolutions)
    pub fn compute_solutions_for_permutation_improved(
        &self,
        tiles: &[TileDimensions],
        stock_solution: &StockSolution,
    ) -> Result<Vec<Solution>, CuttingError> {
        let mut solutions = vec![Solution::from_stock_solution(stock_solution)];

        // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞–Ω–µ–ª—å (–∫–∞–∫ –≤ Java)
        for (tile_index, tile) in tiles.iter().enumerate() {
            let mut new_solutions = Vec::new();

            for solution in &solutions {
                let mut placed_in_existing = false;

                // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–∑–∞–∏–∫–∞—Ö
                for mosaic in solution.get_mosaics() {
                    match mosaic.add(tile, false) {
                        Ok(result_mosaics) => {
                            for result_mosaic in result_mosaics {
                                let mut new_solution =
                                    Solution::copy_excluding_mosaic(solution, mosaic);
                                new_solution.add_mosaic(result_mosaic);
                                new_solutions.push(new_solution);
                                placed_in_existing = true;
                            }
                        }
                        Err(_) => continue,
                    }
                }

                // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–∑–∞–∏–∫–∏, –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—É—é —Å—Ç–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
                if !placed_in_existing {
                    if let Some(unused_stock) = solution.get_unused_stock_panels().front() {
                        let new_mosaic = Mosaic::new(unused_stock);
                        match new_mosaic.add(tile, false) {
                            Ok(result_mosaics) => {
                                for result_mosaic in result_mosaics {
                                    let mut new_solution = Solution::copy(solution);
                                    new_solution.get_unused_stock_panels_mut().pop_front();
                                    new_solution.add_mosaic(result_mosaic);
                                    new_solutions.push(new_solution);
                                    placed_in_existing = true;
                                }
                            }
                            Err(_) => {
                                let mut failed_solution = Solution::copy(solution);
                                failed_solution.get_no_fit_panels_mut().push(tile.clone());
                                new_solutions.push(failed_solution);
                            }
                        }
                    } else {
                        let mut failed_solution = Solution::copy(solution);
                        failed_solution.get_no_fit_panels_mut().push(tile.clone());
                        new_solutions.push(failed_solution);
                    }
                }
            }

            solutions = new_solutions;

            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º (–∫–∞–∫ –≤ Java)
            self.remove_duplicate_solutions(&mut solutions);
            self.sort_solutions_by_quality(&mut solutions);

            let accuracy_factor = 100;
            if solutions.len() > accuracy_factor {
                solutions.truncate(accuracy_factor);
            }

            if tile_index % 10 == 0 && tile_index > 0 {
                println!(
                    "  üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {}/{} –ø–∞–Ω–µ–ª–µ–π, —Ä–µ—à–µ–Ω–∏–π: {}",
                    tile_index + 1,
                    tiles.len(),
                    solutions.len()
                );
            }
        }

        Ok(solutions)
    }

    /// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π (–∫–∞–∫ –≤ Java generateGroups)
    pub fn generate_groups(&self, tiles: &[TileDimensions]) -> Vec<GroupedTileDimensions> {
        if tiles.is_empty() {
            return Vec::new();
        }
        
        let mut panel_counts = HashMap::new();
        for tile in tiles {
            let key = format!("{}x{}", tile.width, tile.height);
            *panel_counts.entry(key).or_insert(0) += 1;
        }

        let mut grouped_tiles = Vec::new();
        let mut group_counter = HashMap::new();

        for tile in tiles {
            let key = format!("{}x{}", tile.width, tile.height);
            let total_count = panel_counts[&key];
            let current_count = group_counter.entry(key.clone()).or_insert(0);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
            let max_group_size = if total_count > 100 {
                std::cmp::max(total_count / 100, 1)
            } else {
                total_count // –î–ª—è –º–∞–ª—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
            };
            
            let group_id = if total_count > max_group_size && *current_count > 0 {
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
                let quarter_size = std::cmp::max(total_count / 4, 1);
                if *current_count > quarter_size {
                    *current_count = 0;
                    (*current_count / quarter_size) as i32
                } else {
                    0
                }
            } else {
                0
            };

            *current_count += 1;
            grouped_tiles.push(GroupedTileDimensions::new(tile.clone(), group_id));
        }

        grouped_tiles
    }

    /// –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∫–∞–∫ –≤ Java removeDuplicatedPermutations)
    pub fn remove_duplicate_permutations(
        &self,
        permutations: Vec<Vec<TileDimensions>>,
    ) -> Vec<Vec<TileDimensions>> {
        let mut seen_hashes = std::collections::HashSet::new();
        let mut unique_permutations = Vec::new();
        let original_count = permutations.len();

        for permutation in permutations {
            let mut hash = 0i32;
            for tile in &permutation {
                hash = hash
                    .wrapping_mul(31)
                    .wrapping_add(tile.dimensions_based_hash_code());
            }

            if seen_hashes.insert(hash) {
                unique_permutations.push(permutation);
            }
        }

        println!(
            "üîÑ –£–¥–∞–ª–µ–Ω–æ {} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫",
            original_count - unique_permutations.len()
        );

        unique_permutations
    }

    /// –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–µ—à–µ–Ω–∏–π
    pub fn remove_duplicate_solutions(&self, solutions: &mut Vec<Solution>) {
        let mut seen_signatures = std::collections::HashSet::new();

        solutions.retain(|solution| {
            let signature = solution.get_structure_identifier();
            seen_signatures.insert(signature)
        });
    }

    /// –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏—è –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    pub fn sort_solutions_by_quality(&self, solutions: &mut Vec<Solution>) {
        solutions.sort_by(|a, b| {
            let placed_a = a.get_nbr_final_tiles();
            let placed_b = b.get_nbr_final_tiles();

            match placed_b.cmp(&placed_a) {
                std::cmp::Ordering::Equal => {
                    let efficiency_a = if a.get_total_area() > 0 {
                        (a.get_used_area() as f64 / a.get_total_area() as f64) * 100.0
                    } else {
                        0.0
                    };
                    let efficiency_b = if b.get_total_area() > 0 {
                        (b.get_used_area() as f64 / b.get_total_area() as f64) * 100.0
                    } else {
                        0.0
                    };

                    match efficiency_b
                        .partial_cmp(&efficiency_a)
                        .unwrap_or(std::cmp::Ordering::Equal)
                    {
                        std::cmp::Ordering::Equal => b.get_total_area().cmp(&a.get_total_area()),
                        other => other,
                    }
                }
                other => other,
            }
        });
    }

    /// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–∫–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
    pub fn generate_stock_solutions_improved(
        &self,
        stock_tiles: &[TileDimensions],
        tiles: &[TileDimensions],
    ) -> Vec<StockSolution> {
        let mut solutions = Vec::new();

        let total_tiles_area: i64 = tiles.iter().map(|t| t.get_area()).sum();

        let mut sorted_stock = stock_tiles.to_vec();
        sorted_stock.sort_by(|a, b| a.get_area().cmp(&b.get_area()));

        // –û–¥–∏–Ω–æ—á–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
        for stock_tile in &sorted_stock {
            solutions.push(StockSolution::new(vec![stock_tile.clone()]));
        }

        // –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–∑ 2-3 –ø–∞–Ω–µ–ª–µ–π
        for i in 0..sorted_stock.len() {
            for j in (i + 1)..sorted_stock.len().min(i + 10) {
                let combo_area = sorted_stock[i].get_area() + sorted_stock[j].get_area();

                if combo_area >= total_tiles_area / 2 {
                    solutions.push(StockSolution::new(vec![
                        sorted_stock[i].clone(),
                        sorted_stock[j].clone(),
                    ]));
                }

                if j + 1 < sorted_stock.len() {
                    let triple_area = combo_area + sorted_stock[j + 1].get_area();
                    if triple_area >= total_tiles_area * 3 / 4 {
                        solutions.push(StockSolution::new(vec![
                            sorted_stock[i].clone(),
                            sorted_stock[j].clone(),
                            sorted_stock[j + 1].clone(),
                        ]));
                    }
                }
            }
        }

        solutions.sort_by(|a, b| a.get_total_area().cmp(&b.get_total_area()));
        solutions.truncate(100);

        solutions
    }

    /// –ü–æ–º–æ—â–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
    pub fn get_distinct_grouped_tile_dimensions(
        &self,
        grouped_tiles: &[GroupedTileDimensions],
    ) -> HashMap<String, (TileDimensions, i32)> {
        let mut distinct = HashMap::new();
        for grouped_tile in grouped_tiles {
            let key = format!("{}x{}_g{}", grouped_tile.tile.width, grouped_tile.tile.height, grouped_tile.group_id);
            let current_count = distinct.entry(key.clone()).or_insert((grouped_tile.tile.clone(), 0)).1;
            distinct.insert(key, (grouped_tile.tile.clone(), current_count + 1));
        }
        distinct
    }

    pub fn groups_to_tiles(
        &self,
        group_permutation: &[String],
        grouped_tiles: &[GroupedTileDimensions],
        distinct_groups: &HashMap<String, (TileDimensions, i32)>,
    ) -> Vec<TileDimensions> {
        let mut result = Vec::new();

        for group_key in group_permutation {
            if let Some((tile_template, count)) = distinct_groups.get(group_key) {
                for _ in 0..*count {
                    result.push(tile_template.clone());
                }
            }
        }

        result
    }
}
